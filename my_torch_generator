#!/usr/bin/env python3

import os
import json
import argparse
from neural_network import NeuralNetwork

class NetworkGenerator:
    
    def generate_networks(config_file, num_networks):
        with open(config_file, 'r') as f:
            config = json.load(f)
        
        layer_sizes = config.get('layer_sizes', [64, 32, 16])
        output_classes = config.get('output_classes', 2)
        
        base_name = os.path.splitext(config_file)[0]
        
        for i in range(1, num_networks + 1):
            network = NeuralNetwork(input_shape=(8,8,20), output_classes=output_classes, hidden_layers=layer_sizes)
            
            output_file = f"{base_name}_{i}.nn"
            network.save(output_file)
            print(f"Generated network: {output_file}")

def main():
    parser = argparse.ArgumentParser(
        description="Neural Network Generator for Chess Analysis"
    )
    parser.add_argument(
        'config_file', 
        help="Configuration file for neural network"
    )
    parser.add_argument(
        'num_networks', 
        type=int, 
        help="Number of networks to generate"
    )
    
    try:
        args = parser.parse_args()
    except SystemExit:
        exit(84)
    
    NetworkGenerator.generate_networks(
        args.config_file, 
        args.num_networks
    )

if __name__ == "__main__":
    main()